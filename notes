IOS-style command tree
like libui


lexers/parsers:
	- internal child/parent pipe protocol (like IRC)
	- ansi (?) terminal escape sequences (handled by external library)
	- grammar for command tree



strategy for things like IPs etc, is to modify the tree. this way tab completion is always centralised
	- that doesn't permit e.g. short forms for IPv6, if we can hook on things wrt completion



provide serial console and IP socket interfaces


depends on library for handling terminal escape sequences (for arrow keys etc)


handles:

binding to a socket, forking on accept()
simple UI interaction (history buffer etc) handled within the forked child
has an internal pipe to communicate from connected peers up to the server;
text-based protocol on that pipe, parsed by the server
the server process calls callbacks to handle each command

user/password, enable, configure modes


